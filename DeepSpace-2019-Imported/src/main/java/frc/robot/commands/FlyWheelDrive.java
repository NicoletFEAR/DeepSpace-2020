// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;
// import frc.robot.RobotMap;
// import frc.robot.subsystems.DriveTrain;
import frc.robot.RobotMap;

// import com.ctre.phoenix.motorcontrol.ControlMode;

// import frc.robot.OI;
import edu.wpi.first.wpilibj.GenericHID;

// import edu.wpi.first.wpilibj.GenericHID.Hand;
/**
 *
 */
public class FlyWheelDrive extends Command {

    public FlyWheelDrive() {
        requires(Robot.gameMech);
    }

    @Override
    protected void initialize() {
    }

    @Override
    protected void execute() {
        // for joy sticks if not xbox cotroller
        // Robot.oi.getRightJoystick());

        double forwardValue = Robot.oi.getXbox2().getTriggerAxis(GenericHID.Hand.kRight);
        double reverseValue = Robot.oi.getXbox2().getTriggerAxis(GenericHID.Hand.kLeft);

        // So Cool! :D
        double robotOutput = forwardValue - reverseValue;

        if (Math.abs(robotOutput) < RobotMap.ARM_JOYSTICK_DEAD_ZONE) {
            robotOutput = 0;
        }

        if (robotOutput > RobotMap.FLYWHEEL_LIMITER)
            robotOutput = RobotMap.FLYWHEEL_LIMITER;
        else if (robotOutput < -RobotMap.FLYWHEEL_LIMITER)
            robotOutput = -RobotMap.FLYWHEEL_LIMITER;

        Robot.gameMech.spinFlyWheels(robotOutput);
        //  if (robotOutput > 0 && Robot.gameMech.getCargoLimitSwitch()) { // if spinning in and cargo inside
        //      Robot.gameMech.pull();
        //  }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
